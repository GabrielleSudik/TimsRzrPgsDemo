The Razor Pages Project
from Tim Corey's Which ASP.NET Core course

-- Exporting the DLL (do this in the Common solution) --

The TimsAspNetCoreCommon solution is complete.
We've to export it so the 5 web projects can use it.

Steps:
1. Change dropdown at top from Debug to Release.
2. Build or Rebuild solution.
3. Rt click DataLibrary project -- Open Folder in F Expl --
bin folder -- Release -- NetCoreApp3.1 -- there's a .DLL file.
4. DataLibrary.dll will become a dependency in our other projects.
*. One step we are NOT doing is going to project's Properties - Package -
"Generate Nuget package on build" route. But we could. Instead:
5. When we start each new project, we'll reference that .dll file.
I guess further instructions will come soon.

-- Add the DLL from the Common / DB project --

1. Copy the DataLibrary.dll from Windows Explorer
and Rt-click project -- Paste. (Make sure you're getting it from the Common project!)
2. Rt-click DataLibrary.dll -- Properties --
set "Copy to Output Directory" to "Copy Always".
3. Rt-click Dependencies -- Add Reference -- browse for it.
4. It will show up in Dependencies-Assemblies.
5. Confirm it's available by going to Startup.cs and
typing something like "DataLibrary.Models.FoodModel" to see
if VS recognizes it.

6. I anticipate you'll have to make some changes
when you switch between work and home.

-- Configure the DI --

Startup.cs -- check your notes.
ConfigureServices: where we inject the classes from the Common project
as Singletons. (Depending on the kind of app you're writing, you
won't always use Singleton; sometimes other things.)

-- Add the ConnectionString --

WAIT. WHY is this not updating on GitHub? Ugh.
You are manually copy and pasting your work into home compy.
Maybe because you didn't add a .gitignore so weird stuff is saving?
Anyway...

appsettings.json
It doesn't have connection string info by default.
Check it out, starting with "ConnectionStrings"
Note we identify the "Default" and elsewhere in the code
we say the connection string will be to "Default". It's 
just following the path...

connectionstrings.com -- has a whole bunch of options to use to
connect to all sorts of DB, including stuff like Excel and AD.
We're using SQL Server. Then scroll down and check for the boilerplate
strings like Trusted Connection, LocalDB Automatic Instance, etc.
Copy, paste, modify.

Another way to find your connection string. Maybe even better:
Open SQL Server Object Explorer, find your DB (TimsDinerDB),
Rt-click for Properties, find the Connection string property,
copy the value, paste it into the value for CS in appsettings.json.

Here it is:
Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=TimsDinerDB;
Integrated Security=True;Connect Timeout=30;Encrypt=False;
TrustServerCertificate=False;ApplicationIntent=ReadWrite;
MultiSubnetFailover=False

What those mean:
Data Source = location of DB
Initial Catalog = name of DB
Integrated Security true = uses Windows login
(those three are the only requireds)
(the others are helpful and just come boilerplate)

This is not the same connection string you'd use in other envs.
In real life, you'd have pipelines and stuff to change the CS
to match the env.
One reason we use a json file to set this is because text files
are very easy to change by the pipeline.
And you can keep the json file separate from the code,
so even devs can't tinker with it, keeping it more secure.

-- Routing --

Startup.cs -- check your notes there.

app.UseRouting(); sets things up.
app.UseEndpoints(//stuff); is the details.

-- Creating Data --

New folder: Pages -> Orders -> new Razor Page "Create".
It scaffolds .cshtml and .cshtml.cs.
The .cs looks like a Web Forms code-behind, but it's not.
It's MVVM.

Head to Create.cshtml.cs for code and notes.

