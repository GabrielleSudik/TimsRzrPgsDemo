The Razor Pages Project
from Tim Corey's Which ASP.NET Core course

-- Exporting the DLL (do this in the Common solution) --

The TimsAspNetCoreCommon solution is complete.
We've to export it so the 5 web projects can use it.

Steps:
1. Change dropdown at top from Debug to Release.
2. Build or Rebuild solution.
3. Rt click DataLibrary project -- Open Folder in F Expl --
bin folder -- Release -- NetCoreApp3.1 -- there's a .DLL file.
4. DataLibrary.dll will become a dependency in our other projects.
*. One step we are NOT doing is going to project's Properties - Package -
"Generate Nuget package on build" route. But we could. Instead:
5. When we start each new project, we'll reference that .dll file.
I guess further instructions will come soon.

-- Add the DLL from the Common / DB project --

1. Copy the DataLibrary.dll from Windows Explorer
and Rt-click project -- Paste. (Make sure you're getting it from the Common project!)
1.5. Do the same for DataLibrary.deps.json
(Tim backtracked on adding that one, but it was interesting to see)
2. Rt-click DataLibrary.dll -- Properties --
set "Copy to Output Directory" to "Copy Always".
3. Rt-click Dependencies -- Add Reference -- browse for it.
4. It will show up in Dependencies-Assemblies.
5. Confirm it's available by going to Startup.cs and
typing something like "DataLibrary.Models.FoodModel" to see
if VS recognizes it.

6. I anticipate you'll have to make some changes
when you switch between work and home.

-- Configure the DI --

Startup.cs -- check your notes.
ConfigureServices: where we inject the classes from the Common project
as Singletons. (Depending on the kind of app you're writing, you
won't always use Singleton; sometimes other things.)

-- Add the ConnectionString --

WAIT. WHY is this not updating on GitHub? Ugh.
You are manually copy and pasting your work into home compy.
Maybe because you didn't add a .gitignore so weird stuff is saving?
Anyway...

appsettings.json
It doesn't have connection string info by default.
Check it out, starting with "ConnectionStrings"
Note we identify the "Default" and elsewhere in the code
we say the connection string will be to "Default". It's 
just following the path...

connectionstrings.com -- has a whole bunch of options to use to
connect to all sorts of DB, including stuff like Excel and AD.
We're using SQL Server. Then scroll down and check for the boilerplate
strings like Trusted Connection, LocalDB Automatic Instance, etc.
Copy, paste, modify.

Another way to find your connection string. Maybe even better:
Open SQL Server Object Explorer, find your DB (TimsDinerDB),
Rt-click for Properties, find the Connection string property,
copy the value, paste it into the value for CS in appsettings.json.

Here it is:
Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=TimsDinerDB;
Integrated Security=True;Connect Timeout=30;Encrypt=False;
TrustServerCertificate=False;ApplicationIntent=ReadWrite;
MultiSubnetFailover=False

What those mean:
Data Source = location of DB
Initial Catalog = name of DB
Integrated Security true = uses Windows login
(those three are the only requireds)
(the others are helpful and just come boilerplate)

This is not the same connection string you'd use in other envs.
In real life, you'd have pipelines and stuff to change the CS
to match the env.
One reason we use a json file to set this is because text files
are very easy to change by the pipeline.
And you can keep the json file separate from the code,
so even devs can't tinker with it, keeping it more secure.

-- Routing --

Startup.cs -- check your notes there.

app.UseRouting(); sets things up.
app.UseEndpoints(//stuff); is the details.

-- Creating Data --

New folder: Pages -> Orders -> new Razor Page "Create".
It scaffolds .cshtml and .cshtml.cs.
The .cs looks like a Web Forms code-behind, but it's not.
It's MVVM.

Head to Create.cshtml.cs for code and notes.

Oh no! Tim and I get errors midway through, trying to start the project.
The fix:
We need to add more references, apparently to make Nuget packages work.
Rt click project name, Edit Project File (.csproj). Look for refs:

<ItemGroup>
    <Reference Include="DataLibrary">
      <HintPath>..\..\TimsAspNetCoreCommon\DataLibrary\bin\Release\netcoreapp3.1\DataLibrary.dll</HintPath>
      //etc

The problem is that not all refs from DataLibrary moved over to this project.
So...

In DataLibary .csprog, you'll see:
  <ItemGroup>
    <PackageReference Include="Dapper" Version="2.0.35" />
    <PackageReference Include="Microsoft.Data.SqlClient" Version="1.1.3" />
    <PackageReference Include="Microsoft.Extensions.Configuration" Version="3.1.4" />
  </ItemGroup>

Copy those three things, put them in THIS csproj file
in the ItemGroup / Reference area.
Rebuild solution, check the new refs are added to dependencies. (They are.)

At this point, we can check out a bare bones page.
Run it -> https://localhost:5001/Orders/Create

More notes in Create..cshtml and .cshtml.cs.

-- Reading Data --

New Razor Page under Orders -> Display.
/Orders/Display -- the .cshtml and the .cs.
All your notes are there.

Part two of lesson:
New Pages folder Food, new Razor Page List.
/Food/List
Check some notes there.

-- Updating Data --

We'll modify Display page.
Makes sense, right? See the data, then change what you need.

Create a new model. New folder: Model ->
New class -> OrderUpdateModel

Tim encourages us to make as many models as you need
even if there is a lot of near-duplication.
Like in our case, Order and OrderUpdate are similar
but each serves it own purpose.
Don't try to make an oval fit a circle.

You got the changes working.
How is Razor Page different from a Blazor Page?
Razor Pages do everything server-side, then deliver it
to the client. Ie, the whole Display page is refreshed
when you update an order. It _looks like_ only one
thing changes, because it's small and fast. But it's
all server-side.

-- Deleting Data --

Create new Razor Page under Orders/Delete.
Check the .cshtml and .cs for notes and code.

https://localhost:5001/Orders/Delete?Id=2002 or similar
is the path you'll need to type (until you create links
in the pages themselves).

Finally, check out _Layout. 
We'll add some navigations to the nav bar. Easy.

--Deploying the App --

This is a walkthrough for a quickie publish.
It's not for production stuff, more like deploying while developing.

Right Click project name -> Publish -> choose Folder option ->
Create Profile -> seleted the Edit pencil -> Deployment Mode:
select Self-contained (this brings .net core 3.1 along with the app;
the other option trusts that the target compy already has it.)
Check the box to delete previous versions. (Sometimes you'll change
other things too, but that's it for this lesson.) 

Hit SAVE. Hit PUBLISH. You'll see:
========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========
========== Publish: 1 succeeded, 0 failed, 0 skipped ==========

Open project in File Explorer -> bin - Release - 3.1 - publish.
Lots of files there. 
Open appsettings.json in a code editor.
Edit the connection string to be the real location,
not your local desktop. (Note you didn't actually do this,
Tim just says to do it.)

Next, copy the link of the publish folder in File Explorer.
Head to the web and find your web hosting.
Tim uses interServer for his asp.net web hosting. It's cheap.
Up to 25 sites, free SSL certs, DB uploads.
Use Tim's link so he gets a referral kickback.
SEE BONUS SECTION OF THIS COURSE TO SET UP A SITE!!

There's more to this lesson, but you're zoning
because there's more to it than just what Tim is showing.

--- End of Razor Pages Demo ---
