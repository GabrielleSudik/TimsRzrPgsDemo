@page
@model RzrPgsDemoApp.DisplayModel
@{
    ViewData["Title"] = "Display";
}

<h1>Display</h1>

<!--How will the following code know if Model.Order is null?
    Check the .cs for the OnGet method and logic.
    -->
@if (Model.Order is null)
{
    <h4>The requested item wasn't found.</h4>
}
else
{
    <table class="table">
        <tbody>
            <tr>
                <td><strong>Order Name</strong></td>
                <td>@Model.Order.OrderName</td>
            </tr>
            <tr>
                <td><strong>Order Date</strong></td>
                <td>@Model.Order.OrderDate</td>
            </tr>
            <tr>
                <td><strong>Order Total</strong></td>
                <td>@string.Format("{0:C}", Model.Order.Total)</td>
                <!--Format it to currency of the machine.-->
            </tr>
            <tr>
                <td><strong>Item Ordered</strong></td>
                <td>@Model.ItemPurchased</td>
                <!--THIS ONE ONLY - the model is DisplayModel
            (see the top of this page). We created this one
            property in this model. All the rest are from
            the model called Order.-->
            </tr>
            <tr>
                <td><strong>Quanity</strong></td>
                <td>@Model.Order.Quantity</td>
            </tr>

            <!--added later to make deleting things tidier:-->
            <tr>
                <td colspan="2">
                    <a asp-page="./Delete" asp-route-id="@Model.Order.Id" class="btn btn-danger">Delete this order</a>
                </td>
                <!--Note about asp-route-id: That tag doesn't show up in intellisense.
                    I THINK it's because it's really named after the field you're referencing.
                    Ie, if the field were Model.Order.Name it would be asp-route-name.
                    I AM NOT SURE ABOUT THIS.-->
            </tr>
        </tbody>
    </table>

    <!--this next bit is to allow updating of data that is displayed.-->

    <form method="post">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <input asp-for="OrderUpdate.Id" value="@Model.Order.Id" type="hidden" />
        <!--that last line: When you do a get, subsequent posts don't rememeber
            anything about that get. So you have to tell the post the info it needs.
            Here, we are telling it that this line of code is about OrderUpdate.Id
            and it gets the value from Model.Order.Id. We keep it hidden because
            we need to pass that data along, but the user shouldn't see it.-->
        <div class="form-group">
            <label asp-for="OrderUpdate.Name" class="control-label"></label>
            <input asp-for="OrderUpdate.Name" value="@Model.Order.OrderName" class="form-control" />
            <span asp-validation-for="OrderUpdate.Name" class="text-danger"></span>
        </div>
        <div class="form-group">
            <input type="submit" value="Update order name here" class="btn btn-primary" />
        </div>
    </form>
}

<!--Per Tim: See the "is null" in the if statement? It's just like ==.
    Sometimes you CAN make these mean two diff things
    but you have to create overloads, and Tim says don't do that.-->
